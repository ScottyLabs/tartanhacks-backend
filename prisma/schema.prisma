// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// ======================================================
// Models
// ======================================================

// Represents a single user on the system
model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  admin    Boolean

  firstName String?
  lastName  String?

  status String

  companyId String?  @db.ObjectId
  company   Sponsor? @relation(fields: [companyId], references: [id])

  lastLogin DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile?
  teamLed Team?    @relation("Team Leadership")

  teamId       String?       @db.ObjectId
  team         Team?         @relation("Team Membership", onUpdate: NoAction, onDelete: NoAction, fields: [teamId], references: [id])
  teamRequests TeamRequest[]
}

// Information associated with a participant application
model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @unique @db.ObjectId
  user        User   @relation(fields: [userId], references: [id])
  displayName String

  school         String
  college        String?
  educationLevel EducationLevel
  graduationYear Int

  gender      Gender
  genderOther String?

  ethnicity      Ethnicity
  ethnicityOther String?

  totalPoints Int    @default(0)
  phoneNumber String

  major                String?
  coursework           String?
  programmingLanguages String?

  hackathonExperience HackathonExperience?
  workPermission      WorkPermission?
  workLocation        String?
  workStrengths       String?

  github  String?
  website String?

  essays String[] @default([])

  dietaryRestrictions      DietaryRestriction[] @default([])
  dietaryRestrictionsOther String?

  shirtSize           ShirtSize?
  wantsHardware       Boolean?
  attendingPhysically Boolean    @default(true)

  // Generated server-side, not stored in DB
  resumeUrl String?
  photoUrl  String?

  confirmation Confirmation
}

// Information collected after admission
type Confirmation {
  signatureLiability     Boolean
  signaturePhotoRelease  Boolean
  signatureCodeOfConduct Boolean
}

// A corporate sponsor of the event
model Sponsor {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  User User[]
}

// A group of participants
model Team {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  leaderId String  @unique @db.ObjectId
  leader   User    @relation("Team Leadership", fields: [leaderId], references: [id])
  members  User[]  @relation("Team Membership")
  visible  Boolean @default(true)

  teamRequests TeamRequest[]
}

// A request to join a team or invite a user 
model TeamRequest {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  requestType TeamRequestType

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  teamId String @db.ObjectId
  team   Team   @relation(fields: [teamId], references: [id])

  status  TeamRequestStatus
  message String?
}

// ======================================================
// Enums
// ======================================================

// A user's position in the application process
enum Status {
  UNVERIFIED
  VERIFIED
  APPLIED
  WAITLISTED
  ADMITTED
  REJECTED
  CONFIRMED
}

// Highest education level 
enum EducationLevel {
  UNDERGRADUATE
  MASTERS
  DOCTORATE
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum Ethnicity {
  NATIVE_AMERICAN
  ASIAN
  BLACK
  PACIFIC_ISLANDER
  WHITE
  HISPANIC
  OTHER
  PREFER_NOT_TO_SAY
}

// Number of years of hackathon experience
enum HackathonExperience {
  ZERO
  ONE_TO_THREE
  FOUR_PLUS
}

// US work permission
enum WorkPermission {
  CITIZEN
  SPONSORSHIP
  NO_SPONSORSHIP
}

// Dietary restrictions
enum DietaryRestriction {
  PORK
  BEEF
  HALAL
  NUTS
  LACTOSE
  SEAFOOD
  VEGETARIAN
  VEGAN
}

enum ShirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

// Dictates the type of a team request (incoming or outgoing)
enum TeamRequestType {
  INVITE
  JOIN
}

// The request of a sent team join/invite request
enum TeamRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
